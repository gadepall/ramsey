# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14zgEQXQBa4jtvhtj_-6ijPg0hYXco7gj
"""

import numpy as np
import matplotlib.pyplot as plt
from sympy.matrices import Matrix

#input points
A=np.array([21,-2])
B=np.array([15,10])
C=np.array([-5,0])
D = np.array([1,-12])

# Finding midpoints of both the diagonals
print((A+C)/2)
print((B+D)/2)

#function for line generation
def line_gen(A,B):
  len =10
  x_AB = np.zeros((2,len))
  lam_1 = np.linspace(0,1,len)
  for i in range(len):
    temp1 = A + lam_1[i]*(B-A)
    x_AB[:,i]= temp1.T
  return x_AB

#generating lines
x_AB = line_gen(A,B)
x_BC = line_gen(B,C)
x_CD = line_gen(C,D)
x_DA = line_gen(D,A)
x_AC = line_gen(C,A)
x_BD = line_gen(D,B)

#center of the rectangle
O = (A+C)/2

#angle between diagonals
print(np.transpose(A-O)@(C-O)) # not equal to 0, so not a right angle.

#angle between sides
print(np.transpose(B-A)@(C-B)) # equal to 0, so right angle.

#plotting the quadrilateral
plt.plot(x_AB[0,:],x_AB[1,:],label='$AB$')
plt.plot(x_BC[0,:],x_BC[1,:],label='$BC$')
plt.plot(x_CD[0,:],x_CD[1,:],label='$CD$')
plt.plot(x_DA[0,:],x_DA[1,:],label='$DA$')
plt.plot(x_AC[0,:],x_AC[1,:],label='$AC$')
plt.plot(x_BD[0,:],x_BD[1,:],label='$BD$')

#plotting points
plt.plot(A[0], A[1], 'o')
plt.text(A[0] * (1 + 0.03), A[1] * (1 + 0.01) , 'A')
plt.plot(B[0], B[1], 'o')
plt.text(B[0] * (1 + 0.1), B[1] * (1) , 'B')
plt.plot(C[0], C[1], 'o')
plt.text(C[0] * (1 + 0.003), C[1] * (1 + 0.1) , 'C')
plt.plot(D[0],D[1],'o')
plt.text(D[0] * (1 + 0.2), D[1] * (1 + 0.13) , 'D')
plt.plot(O[0], O[1], 'o')
plt.text(O[0] * (1 + 0.03), O[1] * (1 + 0.01) , 'O')

plt.xlabel('$x$')
plt.ylabel('$y$')
plt.legend(loc='best')
plt.grid() # minor
plt.axis('equal')
plt.show()